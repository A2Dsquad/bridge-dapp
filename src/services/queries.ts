/**
 * Generated by orval v7.1.0 üç∫
 * Do not edit manually.
 * ZKBridge API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import * as axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import type {
  CreateMinterOrderDto,
  ReadMinterOrderDto,
  ReadRewardsDto,
  UpsertRewardsDto,
} from "./models";

export const minterControllerCreateOrder = (
  createMinterOrderDto: CreateMinterOrderDto,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ReadMinterOrderDto>> => {
  return axios.default.post(`/api/minter`, createMinterOrderDto, options);
};

export const getMinterControllerCreateOrderMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof minterControllerCreateOrder>>,
    TError,
    { data: CreateMinterOrderDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof minterControllerCreateOrder>>,
  TError,
  { data: CreateMinterOrderDto },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof minterControllerCreateOrder>>,
    { data: CreateMinterOrderDto }
  > = (props) => {
    const { data } = props ?? {};

    return minterControllerCreateOrder(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type MinterControllerCreateOrderMutationResult = NonNullable<
  Awaited<ReturnType<typeof minterControllerCreateOrder>>
>;
export type MinterControllerCreateOrderMutationBody = CreateMinterOrderDto;
export type MinterControllerCreateOrderMutationError = AxiosError<unknown>;

export const useMinterControllerCreateOrder = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof minterControllerCreateOrder>>,
    TError,
    { data: CreateMinterOrderDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof minterControllerCreateOrder>>,
  TError,
  { data: CreateMinterOrderDto },
  TContext
> => {
  const mutationOptions =
    getMinterControllerCreateOrderMutationOptions(options);

  return useMutation(mutationOptions);
};

export const minterControllerFindBySender = (
  address: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ReadMinterOrderDto[]>> => {
  return axios.default.get(`/api/minter/${address}`, options);
};

export const getMinterControllerFindBySenderQueryKey = (address: string) => {
  return [`/api/minter/${address}`] as const;
};

export const getMinterControllerFindBySenderQueryOptions = <
  TData = Awaited<ReturnType<typeof minterControllerFindBySender>>,
  TError = AxiosError<unknown>,
>(
  address: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof minterControllerFindBySender>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getMinterControllerFindBySenderQueryKey(address);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof minterControllerFindBySender>>
  > = ({ signal }) =>
    minterControllerFindBySender(address, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!address,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof minterControllerFindBySender>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type MinterControllerFindBySenderQueryResult = NonNullable<
  Awaited<ReturnType<typeof minterControllerFindBySender>>
>;
export type MinterControllerFindBySenderQueryError = AxiosError<unknown>;

export function useMinterControllerFindBySender<
  TData = Awaited<ReturnType<typeof minterControllerFindBySender>>,
  TError = AxiosError<unknown>,
>(
  address: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof minterControllerFindBySender>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof minterControllerFindBySender>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useMinterControllerFindBySender<
  TData = Awaited<ReturnType<typeof minterControllerFindBySender>>,
  TError = AxiosError<unknown>,
>(
  address: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof minterControllerFindBySender>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof minterControllerFindBySender>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useMinterControllerFindBySender<
  TData = Awaited<ReturnType<typeof minterControllerFindBySender>>,
  TError = AxiosError<unknown>,
>(
  address: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof minterControllerFindBySender>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useMinterControllerFindBySender<
  TData = Awaited<ReturnType<typeof minterControllerFindBySender>>,
  TError = AxiosError<unknown>,
>(
  address: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof minterControllerFindBySender>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getMinterControllerFindBySenderQueryOptions(
    address,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const rewardsControllerCreateOrder = (
  upsertRewardsDto: UpsertRewardsDto,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ReadRewardsDto>> => {
  return axios.default.post(`/api/rewards`, upsertRewardsDto, options);
};

export const getRewardsControllerCreateOrderMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof rewardsControllerCreateOrder>>,
    TError,
    { data: UpsertRewardsDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof rewardsControllerCreateOrder>>,
  TError,
  { data: UpsertRewardsDto },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof rewardsControllerCreateOrder>>,
    { data: UpsertRewardsDto }
  > = (props) => {
    const { data } = props ?? {};

    return rewardsControllerCreateOrder(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RewardsControllerCreateOrderMutationResult = NonNullable<
  Awaited<ReturnType<typeof rewardsControllerCreateOrder>>
>;
export type RewardsControllerCreateOrderMutationBody = UpsertRewardsDto;
export type RewardsControllerCreateOrderMutationError = AxiosError<unknown>;

export const useRewardsControllerCreateOrder = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof rewardsControllerCreateOrder>>,
    TError,
    { data: UpsertRewardsDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof rewardsControllerCreateOrder>>,
  TError,
  { data: UpsertRewardsDto },
  TContext
> => {
  const mutationOptions =
    getRewardsControllerCreateOrderMutationOptions(options);

  return useMutation(mutationOptions);
};

export const rewardsControllerClaim = (
  earner: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<string>> => {
  return axios.default.post(`/api/rewards/claim/${earner}`, undefined, options);
};

export const getRewardsControllerClaimMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof rewardsControllerClaim>>,
    TError,
    { earner: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof rewardsControllerClaim>>,
  TError,
  { earner: string },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof rewardsControllerClaim>>,
    { earner: string }
  > = (props) => {
    const { earner } = props ?? {};

    return rewardsControllerClaim(earner, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RewardsControllerClaimMutationResult = NonNullable<
  Awaited<ReturnType<typeof rewardsControllerClaim>>
>;

export type RewardsControllerClaimMutationError = AxiosError<unknown>;

export const useRewardsControllerClaim = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof rewardsControllerClaim>>,
    TError,
    { earner: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof rewardsControllerClaim>>,
  TError,
  { earner: string },
  TContext
> => {
  const mutationOptions = getRewardsControllerClaimMutationOptions(options);

  return useMutation(mutationOptions);
};

export const rewardsControllerFindBySender = (
  earner: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ReadRewardsDto>> => {
  return axios.default.get(`/api/rewards/${earner}`, options);
};

export const getRewardsControllerFindBySenderQueryKey = (earner: string) => {
  return [`/api/rewards/${earner}`] as const;
};

export const getRewardsControllerFindBySenderQueryOptions = <
  TData = Awaited<ReturnType<typeof rewardsControllerFindBySender>>,
  TError = AxiosError<unknown>,
>(
  earner: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof rewardsControllerFindBySender>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getRewardsControllerFindBySenderQueryKey(earner);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof rewardsControllerFindBySender>>
  > = ({ signal }) =>
    rewardsControllerFindBySender(earner, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!earner,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof rewardsControllerFindBySender>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type RewardsControllerFindBySenderQueryResult = NonNullable<
  Awaited<ReturnType<typeof rewardsControllerFindBySender>>
>;
export type RewardsControllerFindBySenderQueryError = AxiosError<unknown>;

export function useRewardsControllerFindBySender<
  TData = Awaited<ReturnType<typeof rewardsControllerFindBySender>>,
  TError = AxiosError<unknown>,
>(
  earner: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof rewardsControllerFindBySender>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof rewardsControllerFindBySender>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useRewardsControllerFindBySender<
  TData = Awaited<ReturnType<typeof rewardsControllerFindBySender>>,
  TError = AxiosError<unknown>,
>(
  earner: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof rewardsControllerFindBySender>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof rewardsControllerFindBySender>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useRewardsControllerFindBySender<
  TData = Awaited<ReturnType<typeof rewardsControllerFindBySender>>,
  TError = AxiosError<unknown>,
>(
  earner: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof rewardsControllerFindBySender>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useRewardsControllerFindBySender<
  TData = Awaited<ReturnType<typeof rewardsControllerFindBySender>>,
  TError = AxiosError<unknown>,
>(
  earner: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof rewardsControllerFindBySender>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getRewardsControllerFindBySenderQueryOptions(
    earner,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
